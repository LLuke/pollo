Plan for the next version: make it easy for the user to add support for new
filetypes (including documentation etc.). Also add user preferences (including
recent file list and serialization options) and render tabs correctly
in text/coment nodes. Add more keyboard bindings based on user input.
And of course a lot of bug fixes.

version 0.3.1
=============
 - when a character data node (text, comment, cdata, pi) is collapsed,
   draw the first line of text.
 - Two new types of nodes supported:
    - the document node: this allows that nodes before and after the
      document element (comments and pi's) are now also visible/editable.
    - processing instructions. This is actually a special case of character
      data nodes.
 - the view can now be rendered to a file: just right click on any node
   and select the 'Store as image...' option. Only saving as jpeg is
   supported, as this is the only format support by jdk 1.3 (jdk 1.4
   will also support other formats such as png).
 - wrote the basic code to manage a user-preferences file. The preferences
   file is stored in the user home directory and is named ".pollorc".
 - if a file is changed, a * is shown in front of its name in the
   titlebar (thanks to Steven Noels for the suggestion).
 - the last path used in the file-open dialog is now remembered,
   and written to the user preferences file (thanks to Steven Noels for the
   suggestion).
 - changed the order of the of the Execute and '?' (examples) buttons next to
   the xpath query field. Pressing enter executes the query. (suggestions
   made by Steven Noels).
 - added a schema and template for XSL:FO (in cooperation with Steven Noels).
 - Added a 'View Source' feature (read only)
 - Upgraded jaxen to a version I pulled out of the jaxen cvs repository.

version 0.3
===========
 - Added keyboard support, see the Help->About for an overview
   of the keybindings.
 - All attributes of an element are now rendered, regardless of
   whether they are specified in the display specification or not.
   Attributes that are defined in the display specification are
   first shown (in the same order as they appear in the displayspec),
   then the remaining attributes are shown.
 - Changed the format of the Pollo configuration file to XML instead
   of java properties format. Use apache common's digester to build
   an object structure from it.
 - Defined interfaces for display specifications and schemas and
   for their factories. These factories are now specified in the
   Pollo configuration file per viewtype, so that other implementations
   can be used for other filetypes. Added generic implementations
   of the display specification and schema which can be used for
   XML files not explicitely supported by Pollo. Also made an implementation
   of them which chains a number of other display specifications/schemas.
   This will allow to support file types using mixed schemas,
   such as WSDL containing XML Schema.
 - Added the possibility to create plugins for editing attribute values.
   These plugins can be chained, meaning that if the first plugin
   doesn't return an editor for attribute, then the next plugin is
   asked for one, and so on. Also included is an example plugin for
   Ant, that allows to select property names from a dialog.
 - Added support for executing XPath queries. If the result of the
   query is a list of nodes, you can jump between the nodes. If the
   result is a not a node, it is shown in a dialog box.
 - Use jaxen instead of xalan for executing xpath queries.
 - Added support for templates. A template is implemented by a Java
   class that must generate a dom tree. Currently included is an
   implementation that parses a file, but any code that generates
   a DOM could be used. The templates must be defined in the Pollo
   configuration file.
 - show a red border around the component that has keyboard focus.
 - the list with the elements now require to double click on an element
   to insert it. Alternatively, you can select one an then press enter.
 - when dropping a node on a location where its not allowed (according
   to the schema in use), it is now asked if you want to insert it anyway.
 - removed a bug where the tree could get distored when undoing
   the insertion/removal of a node in a part of the tree that
   was collapsed.
 - Added an 'insert unlisted element' item to the lists with elements.
 - stripping whitespace text nodes did not work in the presence
   of a DTD. Thanks to Ross Burton for reporting this.
 - disabled use of Kunstoff look and feel. It can look ugly on certain
   JDK's. Will make this user-configurable in the next version.
 - Changed splash screen logo to something that better fits with the season.
 - started using log4j in some places. Still needs more work.
 - after deleting a node, move the focus to the next node
 - and any other stuff I forgot to mention...

version 0.2
===========
 - rendering/editing of comment nodes, text nodes, cdata nodes
 - comment out / uncomment
 - text clipping (append '...' if text doesn't fit on the screen)
 - opening multiple files, multiple views on same file
 - replacement of elementdragpanel with nodeinsertionpanel
 - on parsing, all textnodes that only contain whitespace are removed.
   (this is not conformant with the xml spec since only when a schema is
   present, the application can really know what whitespace is ignorable).
   On saving, the XML is indented again (todo: make this user-configurable).
 - save as
 - dropping on element onto itself or as a descendant of itself not allowed anymore
 - initial support for ant files (added an antschema.xml and antspec.xml,
   both files are automatically generated).
 - better indication of the selected node (using thick black border)
 - use mousePressed instead of mouseClicked event to select nodes (otherwise
   some clicks seemed to get lost)
 - a drag-and-drop can now be undone in one step (previously this required
   chosing undo twice). This is done by adding the concept of
   undo-transactions to the undo engine. Update: did the same for 'uncomment'
   and 'comment out' actions.
 - changes to attributes are applied directly to the DOM (no need to press
   the 'Apply changes' button anymore). There's now a clear visible
   distinction between an attribute with no value and one with has empty
   string as value. Attributes are alfabetically sorted.
 - collapse all/expand all
 - eliminated the use of the 'java.text.TextLayout' class, which has resulted
   in large speed improvements.
 - added about dialog with license information.
 - autoscroll when dragging
 - xpath expressions in the schema now resolve namespace prefixes to
   namespaces defined in the schema, rather than in the instance document.
 - and much more...

version 0.1
===========
 - save document in the same encodig as it's loaded (previsously this was always ISO-8859-1)
 - attributespanel is now disabled when no element is selected or after the selected element was removed
